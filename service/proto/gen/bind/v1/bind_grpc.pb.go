// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bind/v1/bind.proto

package bindv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BindService_BindId_FullMethodName    = "/bind.v1.BindService/BindId"
	BindService_BindExist_FullMethodName = "/bind.v1.BindService/BindExist"
	BindService_UnBindId_FullMethodName  = "/bind.v1.BindService/UnBindId"
)

// BindServiceClient is the client API for BindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BindServiceClient interface {
	// bind id and type on socket conn
	BindId(ctx context.Context, in *BindIdRequest, opts ...grpc.CallOption) (*BindIdResponse, error)
	BindExist(ctx context.Context, in *BindExistRequest, opts ...grpc.CallOption) (*BindExistResponse, error)
	UnBindId(ctx context.Context, in *UnBindIdRequest, opts ...grpc.CallOption) (*UnBindIdResponse, error)
}

type bindServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBindServiceClient(cc grpc.ClientConnInterface) BindServiceClient {
	return &bindServiceClient{cc}
}

func (c *bindServiceClient) BindId(ctx context.Context, in *BindIdRequest, opts ...grpc.CallOption) (*BindIdResponse, error) {
	out := new(BindIdResponse)
	err := c.cc.Invoke(ctx, BindService_BindId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindServiceClient) BindExist(ctx context.Context, in *BindExistRequest, opts ...grpc.CallOption) (*BindExistResponse, error) {
	out := new(BindExistResponse)
	err := c.cc.Invoke(ctx, BindService_BindExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindServiceClient) UnBindId(ctx context.Context, in *UnBindIdRequest, opts ...grpc.CallOption) (*UnBindIdResponse, error) {
	out := new(UnBindIdResponse)
	err := c.cc.Invoke(ctx, BindService_UnBindId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BindServiceServer is the server API for BindService service.
// All implementations must embed UnimplementedBindServiceServer
// for forward compatibility
type BindServiceServer interface {
	// bind id and type on socket conn
	BindId(context.Context, *BindIdRequest) (*BindIdResponse, error)
	BindExist(context.Context, *BindExistRequest) (*BindExistResponse, error)
	UnBindId(context.Context, *UnBindIdRequest) (*UnBindIdResponse, error)
	mustEmbedUnimplementedBindServiceServer()
}

// UnimplementedBindServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBindServiceServer struct {
}

func (UnimplementedBindServiceServer) BindId(context.Context, *BindIdRequest) (*BindIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindId not implemented")
}
func (UnimplementedBindServiceServer) BindExist(context.Context, *BindExistRequest) (*BindExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindExist not implemented")
}
func (UnimplementedBindServiceServer) UnBindId(context.Context, *UnBindIdRequest) (*UnBindIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindId not implemented")
}
func (UnimplementedBindServiceServer) mustEmbedUnimplementedBindServiceServer() {}

// UnsafeBindServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BindServiceServer will
// result in compilation errors.
type UnsafeBindServiceServer interface {
	mustEmbedUnimplementedBindServiceServer()
}

func RegisterBindServiceServer(s grpc.ServiceRegistrar, srv BindServiceServer) {
	s.RegisterService(&BindService_ServiceDesc, srv)
}

func _BindService_BindId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindServiceServer).BindId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindService_BindId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindServiceServer).BindId(ctx, req.(*BindIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindService_BindExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindServiceServer).BindExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindService_BindExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindServiceServer).BindExist(ctx, req.(*BindExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BindService_UnBindId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BindServiceServer).UnBindId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BindService_UnBindId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BindServiceServer).UnBindId(ctx, req.(*UnBindIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BindService_ServiceDesc is the grpc.ServiceDesc for BindService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BindService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bind.v1.BindService",
	HandlerType: (*BindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BindId",
			Handler:    _BindService_BindId_Handler,
		},
		{
			MethodName: "BindExist",
			Handler:    _BindService_BindExist_Handler,
		},
		{
			MethodName: "UnBindId",
			Handler:    _BindService_UnBindId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/v1/bind.proto",
}
